kind: Deployment
apiVersion: apps/v1
metadata:
  name: airflow-webserver
  labels:
    app: airflow
    component: webserver
spec:
  replicas: 1
  strategy:
    # Here we define the rolling update strategy
    # - maxSurge define how many pod we can add at a time
    # - maxUnavailable define how many pod can be unavailable
    #   during the rolling update
    # Setting maxUnavailable to 0 would make sure we have the appropriate
    # capacity during the rolling update.
    # You can also use percentage based value instead of integer.
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: webserver
  template:
    metadata:
      labels:
        app: airflow
        component: webserver
    spec:
      serviceAccountName: airflow-webserver
      nodeSelector: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    component: webserver
                topologyKey: kubernetes.io/hostname
              weight: 100
      tolerations: []
      restartPolicy: Always
      securityContext:
        runAsUser: 50000
        fsGroup: 0
      initContainers:
        - name: wait-for-airflow-migrations
          resources: {}
          image: airflow
          imagePullPolicy: IfNotPresent
          args:
            - airflow
            - db
            - check-migrations
            - --migration-wait-timeout=60
          envFrom: []
          env:
            # Dynamically created environment variables
            # Dynamically created secret envs
            # Extra env
            # Hard Coded Airflow Envs
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  name: airflow-fernet-key
                  key: fernet-key
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
              valueFrom:
                secretKeyRef:
                  name: airflow-metadata
                  key: connection
            - name: AIRFLOW_CONN_AIRFLOW_DB
              valueFrom:
                secretKeyRef:
                  name: airflow-metadata
                  key: connection
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: airflow-webserver-secret-key
                  key: webserver-secret-key
        - name: nfs-permission-fixer
          image: airflow
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: dags
              mountPath: "/opt/airflow/dags"
            - name: logs
              mountPath: "/opt/airflow/logs"
          command:
            - bash
            - -c
            - (chmod 770 /opt/airflow/dags; chown 50000 /opt/airflow/dags; chmod 770 /opt/airflow/logs; chown 50000 /opt/airflow/logs)

      containers:
        - name: webserver
          image: airflow
          imagePullPolicy: IfNotPresent
          args:
            - bash
            - -c
            - exec airflow webserver
          resources: {}
          volumeMounts:
            - name: config
              mountPath: /opt/airflow/pod_templates/pod_template_file.yaml
              subPath: pod_template_file.yaml
              readOnly: true
            - name: config
              mountPath: "/opt/airflow/airflow.cfg"
              subPath: airflow.cfg
              readOnly: true
            - name: config
              mountPath: "/opt/airflow/config/airflow_local_settings.py"
              subPath: airflow_local_settings.py
              readOnly: true
            - name: dags
              mountPath: "/opt/airflow/dags"
            - name: logs
              mountPath: "/opt/airflow/logs"
          ports:
            - name: airflow-ui
              containerPort: 8080
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 30
            failureThreshold: 20
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 30
            failureThreshold: 20
            periodSeconds: 5
          envFrom: []
          env:
            # Dynamically created environment variables
            # Dynamically created secret envs
            # Extra env
            # Hard Coded Airflow Envs
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  name: airflow-fernet-key
                  key: fernet-key
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
              valueFrom:
                secretKeyRef:
                  name: airflow-metadata
                  key: connection
            - name: AIRFLOW_CONN_AIRFLOW_DB
              valueFrom:
                secretKeyRef:
                  name: airflow-metadata
                  key: connection
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: airflow-webserver-secret-key
                  key: webserver-secret-key
      volumes:
        - name: config
          configMap:
            name: airflow-config
        - name: dags
          persistentVolumeClaim:
            claimName: dags
        - name: logs
          persistentVolumeClaim:
            claimName: logs
